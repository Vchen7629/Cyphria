- name: Validate Role
  ansible.builtin.import_tasks:
    file: validation.yaml
  any_errors_fatal: true

- name: Argocd Installation
  block:
    - name: checksum fact
      ansible.builtin.uri:
        url: '{{ argocd_project.release.url }}/{{ argocd_project.release.checksum }}'
        return_content: true
      register: checksum
      retries: 3
      delay: 1
      until: checksum is not failed
      run_once: true
      check_mode: false
    
    - name: set sha256 checksum fact
      ansible.builtin.set_fact:
        sha256_checksum: "{{ item.split(' ')[0] }}"
      loop: "{{ checksum.content.split('\n') }}"
      when: item | regex_search(argocd_vars.release.file + '$' )
      run_once: true
    
    - name: Install binary
      ansible.builtin.get_url:
        url: '{{ argocd_project.release.url }}/{{ argocd_project.release.file }}'
        checksum: sha256:{{ sha256_checksum }}
        dest: '{{ k3s_map.node.directory.bin }}/argocd'
        owner: root
        group: root
        mode: '755'
      register: result
      retries: 3
      delay: 1
      until: result is not failed

    - name: add repository
      kubernetes.core.helm_repository:
        name: '{{ argocd_vars.kubernetes.helm.repository.org }}'
        repo_url: '{{ argocd_map.helm.repository.url }}'
    
    - name: Set Docker Credential Facts
      vars:
        env: "{{ lookup('ansible.builtin.template', 'env.yaml' ) | from_yaml }}"
      ansible.builtin.set_fact:
        docker_username: "{{ env['docker-username'] }}"
        docker_password: "{{ env['docker-password'] }}"

        
    - name: Chart Setup
      block:
        - name: Install Chart
          kubernetes.core.helm:
            chart_ref: '{{ argocd_map.helm.chart.reference }}'
            chart_version: '{{ argocd_vars.kubernetes.helm.chart.version }}'
            kubeconfig: '{{ k3s_project.cluster.kubeconfig }}'
            name: '{{ argocd_vars.kubernetes.helm.chart.name }}'
            namespace: '{{ argocd_vars.kubernetes.namespace}}'
            values: "{{ lookup('ansible.builtin.template', 'values.j2') | from_yaml }}"
            timeout: '{{ argocd_map.helm.timeout }}'
            create_namespace: true
            update_repo_cache: true
            wait: true
          register: result
          retries: 3
          delay: 1
          until: result is not failed