configs:
    cm:
{% for user in argocd_accounts.server.users %}
        accounts.{{ user.name }}: {{ user.permissions }}
        accounts.{{ user.name }}.enabled: '{{ user.enabled | lower }}'
{% endfor %}
    secret:
        argocdServerAdminPassword: {{ argocd_map.credentials.admin.password }}

controller:
    replicas: {{ argocd_vars.kubernetes.controller.replicas }}
    pdb:
        enabled: true
        maxUnavailable: 1
    metrics: 
        enabled: true
        service:
            portName: metrics
        serviceMonitor:
            enabled: true
            interval: {{ argocd_map.metrics.monitor.scrape.interval }}
            namespace: {{ argocd_map.metrics.namespace }}
    resources:
        limits:
        {% if argocd_vars.kubernetes.controller.resources.limits.cpu is truthy %}
            cpu: {{ argocd_vars.kubernetes.controller.resources.limits.cpu }}
        {% endif %}
            memory: {{ argocd_vars.kubernetes.controller.resources.limits.memory }}
        requests:
            cpu: {{ argocd_vars.kubernetes.controller.resources.requests.cpu }}
            memory: {{ argocd_vars.kubernetes.controller.resources.requests.memory }}

dex:
    pdb: 
        enabled: true
        maxUnavailable: 1
    resources:  
        limits:
        {% if argocd_vars.kubernetes.dex.resources.limits.cpu is truthy %}
            cpu: {{ argocd_vars.kubernetes.dex.resources.limits.cpu }}
        {% endif %}
            memory: {{ argocd_vars.kubernetes.dex.resources.limits.memory }}
        requests:
            cpu: {{ argocd_vars.kubernetes.dex.resources.requests.cpu }}
            memory: {{ argocd_vars.kubernetes.dex.resources.requests.memory }}
redis:
    pdb:
        enabled: true
        maxUnavailable: 1
    exporter:
        enabled: true
    metrics:
        enabled: true
        service:
            portName: metrics
        serviceMonitor:
            enabled: true
            interval: {{ argocd_map.metrics.monitor.scrape.interval }}
            namespace: {{ argocd_map.metrics.namespace }}
    resources:
        limits:
        {% if argocd_vars.kubernetes.redis.resources.limits.cpu is truthy %}
            cpu: {{ argocd_vars.kubernetes.redis.resources.limits.cpu }}
        {% endif %}
            memory: {{ argocd_vars.kubernetes.redis.resources.limits.memory }}
        requests:
            cpu: {{ argocd_vars.kubernetes.redis.resources.requests.cpu }}
            memory: {{ argocd_vars.kubernetes.redis.resources.requests.memory }}
repoServer:
{% if argocd_vars.kubernetes.repo_server.autoscaling.enabled is truthy %}
    autoScaling:
        enabled: true
        minReplicas: {{ argocd_vars.kubernetes.repo_server.autoscaling.min_replicas }}
        maxReplicas: {{ argocd_vars.kubernetes.repo_server.autoscaling.max_replicas }}
        targetCPUUtilizationPercentage: {{ argocd_vars.kubernetes.repo_server.autoscaling.target.utilization_percentage.cpu }}
        targetMemoryUtilizationPercentage: {{ argocd_vars.kubernetes.repo_server.autoscaling.target.utilization_percentage.memory }}
{% else %} 
    replicas: {{ argocd_vars.kubernetes.repo_server.autoscaling.min_replicas }}
{% endif %}
    metrics:
        enabled: true
        service:
            portName: metrics
        serviceMonitor:
            enabled: true
            interval: {{ argocd_map.metrics.monitor.scrape.interval }}
            namespace: {{ argocd_map.metrics.namespace }}
    pdb:
        enabled: true
        maxUnavailable: 1
    resources:
        limits:
        {% if argocd_vars.kubernetes.repo_server.resources.limits.cpu is truthy %}
            cpu: {{ argocd_vars.kubernetes.repo_server.resources.limits.cpu }}
        {% endif %}
            memory: {{ argocd_vars.kubernetes.repo_server.resources.limits.memory }}
        requests:
            cpu: {{ argocd_vars.kubernetes.repo_server.resources.requests.cpu }}
            memory: {{ argocd_vars.kubernetes.repo_server.resources.requests.memory }}

server:
{% if argocd_vars.kubernetes.server.autoscaling.enabled is truthy %}
    autoScaling:
        enabled: true
        minReplicas: {{ argocd_vars.kubernetes.server.autoscaling.min_replicas }}
        maxReplicas: {{ argocd_vars.kubernetes.server.autoscaling.max_replicas }}
        targetCPUUtilizationPercentage: {{ argocd_vars.kubernetes.server.autoscaling.target.utilization_percentage.cpu }}
        targetMemoryUtilizationPercentage: {{ argocd_vars.kubernetes.server.autoscaling.target.utilization_percentage.memory }}
{% else %} 
    replicas: {{ argocd_vars.kubernetes.server.autoscaling.min_replicas }}
{% endif %}
    metrics:
        enabled: true
        service:
            portName: metrics
        serviceMonitor:
            enabled: true
            interval: {{ argocd_map.metrics.monitor.scrape.interval }}
            namespace: {{ argocd_map.metrics.namespace }}
    pdb:
        enabled: true
        maxUnavailable: 1
    resources:
        limits:
        {% if argocd_vars.kubernetes.repo_server.resources.limits.cpu is truthy %}
            cpu: {{ argocd_vars.kubernetes.repo_server.resources.limits.cpu }}
        {% endif %}
            memory: {{ argocd_vars.kubernetes.repo_server.resources.limits.memory }}
        requests:
            cpu: {{ argocd_vars.kubernetes.repo_server.resources.requests.cpu }}
            memory: {{ argocd_vars.kubernetes.repo_server.resources.requests.memory }}
