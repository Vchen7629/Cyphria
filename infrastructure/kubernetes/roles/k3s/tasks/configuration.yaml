- name: Node configuration
  block:
  - name: Set systemctl parameters
    ansible.builtin.copy:
      content: |
        {% for key, value in k3s_map.node.sysctl_parameters.items() %}
        {{ key }} = {{ value }}
        {% endfor %}
      dest: /etc/sysctl.d/90-kubernetes-node.conf
      owner: root
      group: root
      mode: '644'
    notify: Restart Sysctl
    
  - name: set registries
    ansible.builtin.template:
      src: registries.j2
      dest: /etc/rancher/k3s/registries.yaml
      owner: root
      group: root
      mode: '600'

- name: flush handlers
  ansible.builtin.meta: flush_handlers

- name: Server config
  when: inventory_hostname in k3s_map.server.hosts
  block:
    - name: add variable to environment file
      ansible.builtin.lineinfile:
        path: /etc/environment
        line: KUBECONFIG={{ k3s_project.cluster.kubeconfig }}
        regexp: ^KUBECONFIG

    - name: create Symlinks # allows executing by name instead of /usr/local/bin/name
      ansible.builtin.file:
        path: /usr/local/bin/{{item}}
        src: /usr/local/bin/k3s
        state: link
      loop:
        - crictl
        - ctr
        - kubectl

    - name: validate service state
      ansible.builtin.wait_for:
        port: '{{ k3s_vars.server.api.port }}'
        timeout: 30
      any_errors_fatal: true
    
    - name: Token configuration
      when: k3s_project.cluster.token | length == 0
      no_log: true
      run_once: true
      block:
        - name: wait for token creation
          ansible.builtin.wait_for:
            path: /var/lib/rancher/k3s/server/node-token
        
        - name: Read Token
          ansible.builtin.slurp:
            path: /var/lib/rancher/k3s/server/node-token
          register: node_token

        - name: Set project token
          ansible.utils.update_fact:
            updates:
              - path: k3s_project.cluster.token
                value: '{{ node_token.content | b64decode | trim }}'
          register: update
        
        - name: update project fact
          ansible.builtin.set_fact:
            k3s_project: '{{ update.k3s_project }}'

    - name: Kubepug config
      block:
        - name: Checksum configuration
          run_once: true
          block:
            - name: get remote checksum
              ansible.builtin.uri:
                url: '{{ k3s_project.release.kubepug.checksum }}'
                return_content: true
              register: checksum
              check_mode: false

            - name: set sha256 checksum fact
              ansible.builtin.set_fact:
                sha256_checksum: "{{ item.split(' ')[0] }}"
              loop: "{{ checksum.content.split('\n') }}"
              when: item | regex_search(k3s_vars.release.kubepug.file + '$')

        - name: download Kubepug archive
          ansible.builtin.get_url:
            url: '{{ k3s_project.release.kubepug.file }}'
            checksum: sha256:{{ sha256_checksum }}
            dest: /tmp/
            owner: root
            group: root
            mode: '644'
          register: result
          delay: 1
          retries: 1
          until: result is not failed
          check_mode: false

        - name: Install kubepug binary
          ansible.builtin.unarchive:
            src: /tmp/{{ k3s_vars.release.kubepug.file }}
            dest: /usr/local/bin
            owner: root
            group: root
            mode: '755'
            remote_src: true
    
        - name: remove kubepug archive
          ansible.builtin.file:
            path: /tmp/kubepug_linux_amd64.tar.gz
            state: absent
          check_mode: false

- name: Local config
  when: 
    - k3s_vars.cluster.kubeconfig.local is truthy
    - inventory_hostname in ['localhost', k3s_map.server.default_host]
  run_once: true
  no_log: true
  block:
    - name: create temp file
      ansible.builtin.tempfile:
        prefix: kubeconfig.
      register: kubeconfig

    - name: Copy Kubeconfig file
      ansible.builtin.copy:
        src: /etc/rancher/k3s/k3s.yaml
        dest: '{{ kubeconfig.path }}'
        mode: preserve
        remote_src: true
      
    - name: get file content
      ansible.builtin.slurp:
        path: '{{ kubeconfig.path }}'
      register: file
    
    - name: Set Datasource fact
      ansible.builtin.set_fact:
        datasource: '{{ file.content | b64decode | from_yaml }}'

    - name: set datasource parameters
      ansible.builtin.set_fact:
        datasource: '{{ datasource | combine(parameters) }}'
      vars:
        parameters:
          clusters:
            - cluster:
                certificate-authority-data: "{{ datasource.clusters[0].cluster['certificate-authority-data']}}"
                server: https://{{ k3s_vars.server.api.host if k3s_map.server.ha else k3s_node.ip }}:{{ k3s_vars.server.api.port }}
              name: '{{ datasource.clusters[0].name}}'
              
    - name: Create local .kube directory
      ansible.builtin.file:
        path: '{{ k3s_vars.cluster.kubeconfig.path}}'
        mode: '755'
        state: directory
      delegate_to: localhost
      become: false
    
    - name: update remove .kube/config file
      ansible.builtin.copy:
        content: '{{ datasource | to_nice_yaml(indent=2) }}'
        dest: '{{ kubeconfig.path }}'
        mode: preserve
        remote_src: true
    
    - name: Copy remote .kube/config file locally
      ansible.builtin.fetch:
        src: '{{ kubeconfig.path }}'
        dest: "{{ k3s_vars.cluster.kubeconfig.path + '/config' }}"
        flat: true

    - name: remove remote file
      ansible.builtin.file:
        path: '{{ kubeconfig.path }}'
        state: absent

    - name: Set local file permissions
      ansible.builtin.file:
        path: "{{ k3s_vars.cluster.kubeconfig.path + '/config' }}"
        mode: '600'
        state: file
      delegate_to: localhost
      become: false