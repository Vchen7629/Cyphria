apiVersion: v1
kind: ConfigMap
metadata:
  name: init-schema
data:
  init-schema.sql: |
    CREATE EXTENSION IF NOT EXISTS timescaledb;

    -- Dimension Tables
    CREATE TABLE categories (
        category_id   TEXT   PRIMARY KEY,
        name          TEXT   NOT NULL UNIQUE
    );

    CREATE TABLE topics (
        topic_id  TEXT   PRIMARY KEY,
        name      TEXT   NOT NULL UNIQUE
    );

    CREATE TABLE subreddits (
        subreddit_id  TEXT   PRIMARY KEY,
        name          TEXT   NOT NULL UNIQUE
    );

    -- Fact Table
    CREATE TABLE aggregated_metrics (
        time_bucket   TIMESTAMPTZ  NOT NULL,
        category_id   TEXT         NOT NULL,
        topic_id      TEXT         NOT NULL,
        subreddit_id  TEXT         NOT NULL,
        post_count    INTEGER      NOT NULL,
        avg_sentiment INTEGER      NOT NULL,

        -- Foreign keys
        CONSTRAINT fk_category FOREIGN KEY (category_id) REFERENCES categories(category_id),
        CONSTRAINT fk_topics FOREIGN KEY (topic_id) REFERENCES topics(topic_id),
        CONSTRAINT fk_subreddit FOREIGN KEY (subreddit_id) REFERENCES subreddits(subreddit_id),

        -- Composite Primary key to prevent duplicates
        PRIMARY KEY (time_bucket, category_id, topic_id, subreddit_id)
    );

    -- Create Hypertable (2 hour chunks)
    SELECT create_hypertable('aggregated_metrics', by_range('time_bucket', INTERVAL '2 hours'));

    -- Enable columnstore compression
    ALTER TABLE aggregated_metrics SET (
        timescaledb.compress,
        timescaledb.compress_segmentby = 'category_id, topic_id, subreddit_id',
        timescaledb.compress_orderby = 'time_bucket DESC'
    );

    --- Index for queries (filtering by category, topic, subreddit)
    CREATE INDEX idx_aggregated_metrics_category ON aggregated_metrics (category_id, time_bucket DESC);
    CREATE INDEX idx_aggregated_metrics_topic ON aggregated_metrics (topic_id, time_bucket DESC);
    CREATE INDEX idx_aggregated_metrics_subreddit ON aggregated_metrics (subreddit_id, time_bucket DESC);

    -- Compress data older than 2 hours
    SELECT add_compression_policy('aggregated_metrics', INTERVAL '2 hours');

    
